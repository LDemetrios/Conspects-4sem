#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
#include <CL/cl.h>

template <class T>
std::ostream& operator<<(std::ostream& out, std::vector<T>& v) {
    out << '[';
    for (size_t i = 0; i < v.size(); i++) {
        if (i != 0) out << ' ';
        out << v[i];
    }
    out << ']';
    return out;
}

void print() {
    //do nothing
}

template <class A, class... Args>
void print(A&& a, Args&&... args) {
    std::cout << a;
    print(std::forward<Args>(args)...);
}

template <class... Args>
void println(Args&&... args) {
    print(std::forward<Args>(args)...);
    std::cout << std::endl;
}

class exec_error : public std::runtime_error {
public:
    explicit exec_error(const std::string& what) : std::runtime_error(what) {}
    explicit exec_error(const char* what) : std::runtime_error(what) {}

    exec_error(const exec_error&) = default;
    exec_error& operator=(const exec_error&) = default;
};

template <class SizeT, class T>
std::vector<T> cl_request(auto func, const char* what, auto... args) {
    SizeT size;
    auto err = func(args..., 0, nullptr, &size);
    if (err != 0) {
        if (err == -1) return {}; // -1	if no OpenCL devices that matched device_type were found.
        throw exec_error(std::string(what) + std::to_string(err) + " while obtaining data size");
    }
    std::vector<T> result(size);
    err = func(args..., size, result.data(), &size);
    if (err != 0) {
        throw exec_error(std::string(what) + std::to_string(err) + " while obtaining data");
    }
    return result;
}

std::string cl_request_str(auto func, const char* what, auto... args) {
    std::vector<char> res = cl_request<size_t, char>(func, what, args...);
    return std::string(res.begin(), res.end());
}

template <class T>
T cl_create(auto func, const char* what, auto... args) {
    cl_int err;
    T t = func(args..., &err);
    if (err != 0) {
        throw exec_error(std::string(what) + std::to_string(err) + " while creating");
    }
    return t;
}

void cl_call(auto func, const char* what, auto... args) {
    cl_int err = func(args...);
    if (err != 0) {
        throw exec_error(std::string(what) + std::to_string(err) + " while calling");
    }
}

#define generate_error_message(func, ...) "Request " #func "(" #__VA_ARGS__ __VA_OPT__(", ") "...) terminated with non-zero exit code "

#define request(SizeT, T, func, ...) cl_request<SizeT, T>(&func, generate_error_message(func __VA_OPT__(,) __VA_ARGS__ ) __VA_OPT__(,) __VA_ARGS__)

#define request_str(func, ...) cl_request_str(&func, generate_error_message(func __VA_OPT__(,) __VA_ARGS__ ) __VA_OPT__(,) __VA_ARGS__)

#define create(T, func, ...) cl_create<T>(&func, generate_error_message(func __VA_OPT__(,) __VA_ARGS__ ) __VA_OPT__(,) __VA_ARGS__)

#define call(func, ...) cl_call(&func, generate_error_message(func __VA_OPT__(,) __VA_ARGS__ ) __VA_OPT__(,) __VA_ARGS__)
